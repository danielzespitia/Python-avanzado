class Pokemon:
    def __init__(self, nombre, tipo):
        self.nombre = nombre
        self.tipo = tipo
        self.__nivel = 1
        self.__salud = 100

    def atacar(self, objetivo, dano):
        """
        Reduce la salud del objetivo, verificando que el atacante tenga salud
        y el da√±o sea positivo.
        """
        if self.__salud <= 0:
            print(f"üö´ {self.nombre} no puede atacar, su salud es 0.")
            return

        if dano <= 0:
            print(f"‚ùå El da√±o debe ser un valor positivo.")
            return

        print(f"‚öîÔ∏è {self.nombre} ataca a {objetivo.nombre} con {dano} de da√±o.")
        objetivo.recibir_dano(dano)

    def recibir_dano(self, dano):
        """
        Resta salud al Pok√©mon, asegurando que no sea negativa.
        """
        if dano < 0:
            print(f"‚ùå El da√±o recibido no puede ser negativo.")
            return

        self.__salud -= dano
        if self.__salud < 0:
            self.__salud = 0
        print(f"ü©π {self.nombre} recibe {dano} de da√±o. Salud actual: {self.__salud}")
        if self.__salud == 0:
            print(f"üíÄ {self.nombre} ha sido debilitado.")

    def subir_nivel(self):
        """
        Aumenta el nivel del Pok√©mon en 1.
        """
        self.__nivel += 1
        print(f"‚¨ÜÔ∏è {self.nombre} subi√≥ a nivel {self.__nivel}!")

    def estado(self):
        """
        Muestra el nombre, tipo, nivel y salud actual del Pok√©mon.
        """
        print("\n--- Estado del Pok√©mon ---")
        print(f"Nombre: {self.nombre}")
        print(f"Tipo: {self.tipo}")
        print(f"Nivel: {self.__nivel}")
        print(f"Salud: {self.__salud}")
        print("--------------------------")

    # M√©todo para acceder al nivel (√∫til para la subclase)
    def _get_nivel(self):
        return self.__nivel

    # M√©todo para acceder a la salud (√∫til para la subclase o depuraci√≥n)
    def _get_salud(self):
        return self.__salud


class PokemonLegendario(Pokemon):
    def __init__(self, nombre, tipo, habilidad_especial):
        super().__init__(nombre, tipo)
        self.__habilidad_especial = habilidad_especial

    def atacar(self, objetivo, dano):
        """
        Sobreescribe el m√©todo atacar para a√±adir +20 de da√±o adicional
        si el Pok√©mon est√° en nivel > 50.
        """
        dano_total = dano
        if self._get_nivel() > 50:
            dano_total += 20
            print(f"‚ú® ¬°{self.nombre} usa su poder legendario y a√±ade +20 de da√±o extra!")
        super().atacar(objetivo, dano_total)

    def usar_habilidad(self):
        """
        Muestra el nombre de la habilidad especial y un mensaje de efecto.
        """
        print(f"ü§ñ‚ú® {self.nombre} usa su habilidad especial: '{self.__habilidad_especial}'!")
        print("¬°Una energ√≠a m√≠stica inunda el √°rea!")


# --- Ejemplo de Uso ---
if __name__ == "__main__":
    # Creamos algunos Pok√©mon
    pikachu = Pokemon("Pikachu", "El√©ctrico")
    charmander = Pokemon("Charmander", "Fuego")

    print("--- Estado Inicial ---")
    pikachu.estado()
    charmander.estado()

    print("\n--- Simulaci√≥n de Batalla ---")
    pikachu.atacar(charmander, 30)
    charmander.atacar(pikachu, 25)

    print("\n--- Subiendo de Nivel ---")
    pikachu.subir_nivel()
    pikachu.subir_nivel()
    pikachu.estado()

    print("\n--- Recibiendo Da√±o Grave ---")
    pikachu.recibir_dano(150) # Pikachu ser√° debilitado
    pikachu.estado()
    pikachu.atacar(charmander, 10) # Intentar atacar con salud 0

    print("\n--- Probando Pok√©mon Legendario ---")
    mewtwo = PokemonLegendario("Mewtwo", "Ps√≠quico", "Rayo Ps√≠quico")
    mewtwo.estado()
    mewtwo.usar_habilidad()

    print("\n--- Subiendo de nivel a Mewtwo para activar habilidad extra ---")
    for _ in range(55):  # Sube 55 niveles para asegurar que el nivel sea > 50
        mewtwo.subir_nivel()
    mewtwo.estado()

    print("\n--- Ataque de Mewtwo Legendario con Bonificaci√≥n ---")
    mewtwo.atacar(charmander, 40) # Ahora deber√≠a a√±adir +20 de da√±o
    charmander.estado()