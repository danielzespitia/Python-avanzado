
# Patrones de Dise침o
#
# Los patrones de dise침o son soluciones estandarizadas y probadas para problemas recurrentes en el dise침o de software.
# No son algoritmos espec칤ficos, sino plantillas conceptuales que se pueden adaptar.
#
# Singleton (Instancia 칔nica): Garantiza que una clase tenga una y solo una instancia, y proporciona un punto de acceso global a ella.
# Es 칰til para gestionar recursos compartidos como una conexi칩n a base de datos, un gestor de configuraci칩n o un servicio de logging.
#
# Factory (F치brica): Proporciona una interfaz para crear objetos, pero deja que las subclases decidan qu칠 clase concreta instanciar.
# Esto desacopla el c칩digo cliente de la creaci칩n de objetos espec칤ficos.
#
# Ejemplo Extendido (Patr칩n Factory):
# Un sistema de exportaci칩n de documentos que puede crear diferentes tipos de exportadores (PDF, CSV) sin que el cliente sepa c칩mo se construye cada uno.

from abc import ABC, abstractmethod

# --- Productos ---
class Exportador(ABC):
    @abstractmethod
    def exportar(self, contenido):
        pass

class ExportadorPDF(Exportador):
    def exportar(self, contenido):
        print(f"游늯 Exportando a PDF: '{contenido[:20]}...'")

class ExportadorCSV(Exportador):
    def exportar(self, contenido):
        print(f"游늳 Exportando a CSV: '{contenido[:20]}...'")

# --- La F치brica ---
class FabricaDeExportadores:
    """
    La f치brica se encarga de la l칩gica de creaci칩n.
    El cliente solo pide lo que necesita por un nombre.
    """
    def obtener_exportador(self, formato):
        if formato.lower() == 'pdf':
            return ExportadorPDF()
        elif formato.lower() == 'csv':
            return ExportadorCSV()
        else:
            raise ValueError(f"Formato de exportaci칩n no soportado: {formato}")

# --- C칩digo Cliente ---
def generar_reporte(datos, formato_deseado):
    """
    El c칩digo cliente no sabe nada de ExportadorPDF o ExportadorCSV.
    Solo interact칰a con la f치brica y la interfaz com칰n (Exportador).
    """
    fabrica = FabricaDeExportadores()
    try:
        # Pide a la f치brica que le d칠 el objeto adecuado
        exportador = fabrica.obtener_exportador(formato_deseado)
        # Usa el objeto sin saber su tipo concreto (polimorfismo)
        exportador.exportar(datos)
    except ValueError as e:
        print(e)

# --- Uso del sistema ---
reporte_ventas = "ID,Producto,Cantidad,Precio\n1,Laptop,10,1200\n2,Mouse,50,25"
reporte_narrativo = "Este fue un trimestre exitoso con un crecimiento del 15%..."

generar_reporte(reporte_ventas, "csv")
generar_reporte(reporte_narrativo, "pdf")
generar_reporte("Datos confidenciales", "docx") # Fallar치 de forma controlada